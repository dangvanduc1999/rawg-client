{"version":3,"sources":["utils/apiCaller.js","constants/KeyConstants.js","actions/GamesActions.js","utils/GamesUtils.js","selectors/GamesSelectors.js","containers/GamesContainer.js"],"names":["camelize","require","instanceNext","axios","create","baseURL","API_URL","timeout","fetchApi","endpoint","a","method","body","params","sourceToken","url","data","cancelToken","interceptors","request","use","config","newUrl","PUBLIC_API_KEY","includes","replace","Promise","resolve","error","reject","response","message","GENRE_COLLECTION_TYPE","SEARCH_COLLECTION_TYPE","TAG_COLLECTION_TYPE","GAME_COLLECTION_TYPE","gamesFetchRequest","collectionKey","type","FETCH_GAMES_REQUEST","payload","gamesFetchSuccess","fetchedData","nextUrl","FETCH_GAMES_SUCCESS","fetchGames","dispatch","next","results","console","log","fetchGamesNext","gamesNextUrl","getState","state","games","getGames","collection","isFetching","isExist","loading","fetchGamesIfNeeded","isExists","hasItems","length","collections","gamesUrlByGenre","genre","genreUriSegment","GAMES_PATH","gamesUrlBySearch","search","searchUriSegment","gamesUrlByTag","tag","gamesByCollectionKey","getGameCollectionData","createSelector","getGenre","getSearch","getTag","join","gamesUrl","connect","genres","GENRES","windowSize","getWindowSize","likes","getLikes","isAuthenticated","getIsAuthenticated","changeRoute","playFullVideo","toggleLike","Games"],"mappings":"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","file":"static/js/5.d38f3e1d.chunk.js","sourcesContent":["import axios from 'axios';\nimport { API_URL, PUBLIC_API_KEY } from '../constants/urlApi';\nconst camelize = require('camelize');\n\nconst instanceNext = axios.create({\n  baseURL: API_URL,\n  timeout: 10000\n});\n\ninstanceNext.interceptors.request.use(\n  config => {\n    let newUrl = `${config.url}&key=${PUBLIC_API_KEY}`;\n    if (!config.url.includes('?')) {\n      newUrl = newUrl.replace('&', '?');\n    }\n    config.url = newUrl;\n    return Promise.resolve(config);\n  },\n  error => Promise.reject(error)\n);\n\ninstanceNext.interceptors.response.use(\n  response => camelize(response.data),\n  error => {\n    if (error.response) {\n      return Promise.reject(error.response);\n    }\n    if (error.request) {\n      return Promise.reject(error.request);\n    }\n    return Promise.reject(error.message);\n  }\n);\n\nexport async function fetchApi(\n  endpoint,\n  method = 'GET',\n  body,\n  params,\n  sourceToken\n) {\n  return instanceNext({\n    method: method,\n    url: endpoint,\n    data: body,\n    params: params,\n    cancelToken: sourceToken\n  });\n}\n\nexport async function fetchAllApi(requests = []) {\n  return axios.all(requests);\n}\n","export const GENRE_COLLECTION_TYPE = 'GENRE_COLLECTION_TYPE';\nexport const SEARCH_COLLECTION_TYPE = 'GENRE_COLLECTION_TYPE';\nexport const TAG_COLLECTION_TYPE = 'TAG_COLLECTION_TYPE';\n\nexport const GAME_COLLECTION_TYPE = 'GAME_COLLECTION_TYPE';\n","import {\n  FETCH_GAMES_REQUEST,\n  FETCH_GAMES_SUCCESS\n} from '../constants/ActionTypes';\nimport { fetchApi } from '../utils/apiCaller';\nimport { getGames } from '../selectors/CommonSelectors';\n\nexport const gamesFetchRequest = collectionKey => ({\n  type: FETCH_GAMES_REQUEST,\n  payload: { collectionKey }\n});\n\nexport const gamesFetchSuccess = (collectionKey, fetchedData, nextUrl) => ({\n  type: FETCH_GAMES_SUCCESS,\n  payload: { collectionKey, fetchedData, nextUrl }\n});\n\nexport const fetchGames = (collectionKey, url, method) => async dispatch => {\n  try {\n    dispatch(gamesFetchRequest(collectionKey));\n    const data = await fetchApi(url, method);\n\n    const { next, results } = data;\n\n    dispatch(gamesFetchSuccess(collectionKey, results, next));\n  } catch (err) {\n    console.log('fetchGames error', err);\n  }\n};\n\nexport const fetchGamesNext = (collectionKey, gamesNextUrl) => async (\n  dispatch,\n  getState\n) => {\n  const state = getState();\n  const games = getGames(state);\n  const collection = games[collectionKey];\n  const isExist = !!collection;\n  const isFetching = isExist ? collection.loading : false;\n  const shouldFetch = isExist && !isFetching && gamesNextUrl;\n  if (shouldFetch) {\n    dispatch(fetchGames(collectionKey, gamesNextUrl));\n  }\n};\n\nexport const fetchGamesIfNeeded = (collectionKey, url) => async (\n  dispatch,\n  getState\n) => {\n  const state = getState();\n  const games = getGames(state);\n  const collection = games[collectionKey];\n  const isExists = !!collection;\n  const isFetching = isExists ? collection.loading : false;\n  const hasItems = isExists ? collection.games.length > 0 : false;\n  if (!isExists || (!hasItems && !isFetching)) {\n    dispatch(fetchGames(collectionKey, url));\n  }\n};\n","import { GAMES_PATH } from '../constants/urlApi';\nimport {\n  GENRE_COLLECTION_TYPE,\n  SEARCH_COLLECTION_TYPE,\n  TAG_COLLECTION_TYPE\n} from '../constants/KeyConstants';\n\nconst isFetching = (collections, collectionKey) =>\n  !!collections[collectionKey] ? collections[collectionKey].loading : false;\n\nconst gamesUrlByGenre = genre => {\n  const genreUriSegment = `genres=${genre}`;\n  return `${GAMES_PATH}?${genreUriSegment}`;\n};\n\nconst gamesUrlBySearch = search => {\n  const searchUriSegment = `search=${search}`;\n  return `${GAMES_PATH}?${searchUriSegment}`;\n};\n\nconst gamesUrlByTag = tag => {\n  const searchUriSegment = `tags=${tag}`;\n  return `${GAMES_PATH}?${searchUriSegment}`;\n};\n\nconst gamesNextUrl = (collections, collectionKey) =>\n  !!collections[collectionKey] ? collections[collectionKey].nextUrl : null;\n\nconst gamesByCollectionKey = (collections, collectionKey) =>\n  !!collections[collectionKey] ? collections[collectionKey].games : [];\n\nexport const gameCollectionData = (games, genre, search, tag) => {\n  if (search) {\n    const collectionKey = [SEARCH_COLLECTION_TYPE, search].join('|');\n    return {\n      loading: isFetching(games, collectionKey),\n      gamesUrl: gamesUrlBySearch(search),\n      gamesNextUrl: gamesNextUrl(games, collectionKey),\n      games: gamesByCollectionKey(games, collectionKey),\n      collectionKey\n    };\n  } else if (tag) {\n    const collectionKey = [TAG_COLLECTION_TYPE, tag].join('|');\n    return {\n      loading: isFetching(games, collectionKey),\n      gamesUrl: gamesUrlByTag(tag),\n      gamesNextUrl: gamesNextUrl(games, collectionKey),\n      games: gamesByCollectionKey(games, collectionKey),\n      collectionKey\n    };\n  }\n\n  const collectionKey = [GENRE_COLLECTION_TYPE, genre].join('|');\n  return {\n    loading: isFetching(games, collectionKey),\n    gamesUrl: gamesUrlByGenre(genre),\n    gamesNextUrl: gamesNextUrl(games, collectionKey),\n    games: gamesByCollectionKey(games, collectionKey),\n    collectionKey\n  };\n};\n","import { createSelector } from 'reselect';\nimport { getGames, getGenre, getSearch, getTag } from './CommonSelectors';\nimport { gameCollectionData } from '../utils/GamesUtils';\n\nexport const getGameCollectionData = createSelector(\n  getGames,\n  getGenre,\n  getSearch,\n  getTag,\n  gameCollectionData\n);\n","import { connect } from 'react-redux';\nimport { Games } from '../components';\nimport {\n  getGenre,\n  getWindowSize,\n  getLikes,\n  getIsAuthenticated\n} from '../selectors/CommonSelectors';\nimport { getGameCollectionData } from '../selectors/GamesSelectors';\nimport { GENRES } from '../constants/GlobalConstants';\nimport { changeRoute } from '../actions/RouterActions';\nimport { fetchGamesNext, fetchGamesIfNeeded } from '../actions/GamesActions';\nimport { playFullVideo } from '../actions/AppActions';\nimport { toggleLike } from '../actions/UserActions';\n\nconst mapStateToProps = state => {\n  return {\n    ...getGameCollectionData(state),\n    genres: GENRES,\n    genre: getGenre(state),\n    windowSize: getWindowSize(state),\n    likes: getLikes(state),\n    isAuthenticated: getIsAuthenticated(state)\n  };\n};\n\nexport default connect(mapStateToProps, {\n  fetchGamesNext,\n  fetchGamesIfNeeded,\n  changeRoute,\n  playFullVideo,\n  toggleLike\n})(Games);\n"],"sourceRoot":""}